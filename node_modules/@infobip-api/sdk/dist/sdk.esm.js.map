{"version":3,"file":"sdk.esm.js","sources":["../src/utils/auth-type.ts","../src/utils/email-status-type.ts","../src/utils/validator.ts","../src/utils/auth.ts","../src/utils/http.ts","../src/utils/validators/whatsapp.ts","../src/apis/whatsapp.ts","../src/utils/validators/sms.ts","../src/apis/sms.ts","../src/apis/auth.ts","../src/utils/form-data.ts","../src/apis/email-domain.ts","../src/apis/email.ts","../src/index.ts"],"sourcesContent":["enum AuthType {\n  Basic = 'Basic',\n  ApiKey = 'App',\n  IBSSO = 'IBSSO',\n  OAuth = 'Bearer',\n}\n\nexport { AuthType };\n","enum EmailStatus {\n  Pending = 'PENDING',\n  Paused = 'PAUSED',\n  Processing = 'PROCESSING',\n  Canceled = 'CANCELED',\n  Finished = 'FINISHED',\n  Failed = 'FAILED',\n}\n\nexport { EmailStatus };\n","module Validator {\n  export function required(x: any, name?: string) {\n    if (x === undefined || x === null || x === '') {\n      throw new Error(`${name} is required.`);\n    }\n\n    return true;\n  }\n\n  export function string(x: any, name?: string) {\n    if (typeof x !== 'string' || x === '') {\n      throw new Error(`${name} must be a string.`);\n    }\n\n    return true;\n  }\n\n  export function number(x: any, name?: string) {\n    if (typeof x !== 'number') {\n      throw new Error(`${name} must be a number.`);\n    }\n\n    return true;\n  }\n\n  export function integer(x: any, name?: string) {\n    if (!Number.isInteger(x)) {\n      throw new Error(`${name} must be an integer.`);\n    }\n\n    return true;\n  }\n\n  export function object(x: any, name?: string) {\n    if (typeof x !== 'object') {\n      throw new Error(`${name} must be an object.`);\n    }\n\n    return true;\n  }\n\n  export function array(x: any, name?: string) {\n    if (!Array.isArray(x)) {\n      throw new Error(`${name} must be an array.`);\n    }\n\n    return true;\n  }\n\n  export function oneOf(x: any, y: any, name?: string) {\n    if (!Object.values(y).includes(x)) {\n      throw new Error(`${name} must be one of ${Object.values(y).join(', ')}.`);\n    }\n\n    return true;\n  }\n\n  export function maxLength(x: any, y: number, name?: string) {\n    if (x.length > y) {\n      throw new Error(\n        `${name} must have a length smaller than or equal to ${y}.`\n      );\n    }\n\n    return true;\n  }\n\n  export function max(x: any, y: number, name?: string) {\n    if (x > y) {\n      throw new Error(`${name} must be lower than or equal to ${y}.`);\n    }\n\n    return true;\n  }\n\n  export function requiredString(x: any, name?: string) {\n    return required(x, name) && string(x, name);\n  }\n}\n\nexport { Validator };\n","import { AuthType } from './auth-type';\nimport { Validator } from './validator';\n\nclass InfobipAuth {\n  /**\n   *\n   *\n   */\n\n  baseUrl: string;\n  authType?: AuthType;\n  apiKey?: string;\n  username?: string;\n  password?: string;\n  ibssoToken?: string;\n  oauthToken?: string;\n  authorization?: string;\n\n  constructor({\n    baseUrl,\n    authType = AuthType.ApiKey,\n    apiKey = '',\n    username = '',\n    password = '',\n    ibssoToken = '',\n    oauthToken = '',\n  }: InfobipAuth) {\n    this.baseUrl = baseUrl;\n    this.authType = authType;\n    this.apiKey = apiKey;\n    this.username = username;\n    this.password = password;\n    this.ibssoToken = ibssoToken;\n    this.oauthToken = oauthToken;\n\n    switch (authType) {\n      case AuthType.ApiKey:\n        Validator.required(\n          apiKey,\n          'When using AuthType.ApiKey, Infobip.apiKey'\n        );\n\n        this.authorization = `${authType} ${apiKey}`;\n        break;\n\n      case AuthType.Basic:\n        Validator.required(\n          username,\n          'When using AuthType.Basic, Infobip.username'\n        );\n        Validator.required(\n          password,\n          'When using AuthType.Basic, Infobip.password'\n        );\n\n        this.authorization = `${authType} ${Buffer.from(\n          `${username}:${password}`\n        ).toString('base64')}`;\n\n        break;\n\n      case AuthType.IBSSO:\n        Validator.required(\n          ibssoToken,\n          'When using AuthType.IBSSO, Infobip.ibssoToken'\n        );\n\n        this.authorization = `${authType} ${ibssoToken}`;\n        break;\n\n      case AuthType.OAuth:\n        Validator.required(\n          oauthToken,\n          'When using AuthType.OAuth, Infobip.oauthToken'\n        );\n\n        this.authorization = `${authType} ${oauthToken}`;\n        break;\n\n      default:\n        this.authorization = '';\n        throw new Error(\n          `Invalid authentication type: ${authType}. The only supported types are: ${AuthType.ApiKey}, ${AuthType.Basic}, ${AuthType.IBSSO}, ${AuthType.OAuth}`\n        );\n    }\n  }\n}\n\nexport { InfobipAuth };\n","import axios, { Axios } from 'axios';\n\nclass Http {\n  baseUrl: string;\n  axios: Axios;\n\n  async post(url: string, body?: any, config?: any) {\n    const response = await this.axios.post(url, body, config);\n    return response;\n  }\n\n  async put(url: string, body: any) {\n    const response = await this.axios.put(url, body);\n    return response;\n  }\n\n  async get(url: string, params?: any) {\n    const response = await this.axios.get(url, { params });\n    return response;\n  }\n\n  async download(url: string) {\n    const response = await this.axios.get(url, { responseType: 'stream' });\n    return response;\n  }\n\n  async head(url: string, params?: any) {\n    const response = await this.axios.head(url, { params });\n    return response;\n  }\n\n  async delete(url: string, body?: any) {\n    const response = await this.axios.delete(url, { data: body });\n    return response;\n  }\n\n  constructor(baseUrl: string, authorization?: string) {\n    this.baseUrl = !baseUrl.indexOf('http') ? baseUrl : `https://${baseUrl}`;\n    this.axios = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `${authorization}`,\n      },\n    });\n  }\n}\n\nexport { Http };\n","import { Validator } from '../validator';\n\nexport function validateWhatsappSend(message: any) {\n  if (message.type !== 'template') {\n    Validator.required(message.from, 'message.from');\n    Validator.string(message.from, 'message.from');\n    Validator.required(message.to, 'message.to');\n    Validator.string(message.to, 'message.to');\n    Validator.required(message.content, 'message.content');\n    Validator.object(message.content, 'message.content');\n  }\n\n  if (\n    message.type === 'interactive-buttons' ||\n    message.type === 'interactive-list' ||\n    message.type === 'interactive-multi-product' ||\n    message.type === 'interactive-product'\n  ) {\n    if (message.type !== 'interactive-product') {\n      Validator.required(message.content.body, 'message.content.body');\n      Validator.object(message.content.body, 'message.content.body');\n\n      Validator.required(\n        message.content.body.text,\n        'message.content.body.text'\n      );\n      Validator.string(message.content.body.text, 'message.content.body.text');\n    }\n\n    if (message.content.header) {\n      Validator.required(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n      Validator.string(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n\n      if (message.content.header.type === 'TEXT') {\n        Validator.required(\n          message.content.header.text,\n          'message.content.header.text'\n        );\n        Validator.string(\n          message.content.header.text,\n          'message.content.header.text'\n        );\n      }\n\n      if (\n        message.content.header.type === 'VIDEO' ||\n        message.content.header.type === 'IMAGE' ||\n        message.content.header.type === 'DOCUMENT'\n      ) {\n        Validator.required(\n          message.content.header.mediaUrl,\n          'message.content.header.mediaUrl'\n        );\n        Validator.string(\n          message.content.header.mediaUrl,\n          'message.content.header.mediaUrl'\n        );\n      }\n    }\n\n    if (message.content.footer) {\n      Validator.required(\n        message.content.footer.text,\n        'message.content.footer.text'\n      );\n      Validator.string(\n        message.content.footer.text,\n        'message.content.footer.text'\n      );\n    }\n\n    Validator.required(message.content.action, 'message.content.action');\n    Validator.object(message.content.action, 'message.content.action');\n  }\n\n  switch (message.type) {\n    case 'template':\n      Validator.required(message.messages, 'message.messages');\n      Validator.array(message.messages, 'message.messages');\n      message.messages.forEach((m: any) => {\n        Validator.required(m.from, 'message.messages.from');\n        Validator.string(m.from, 'message.messages.from');\n        Validator.required(m.to, 'message.messages.to');\n        Validator.string(m.to, 'message.messages.to');\n        Validator.required(m.content, 'message.messages.content');\n        Validator.object(m.content, 'message.messages.content');\n\n        Validator.required(\n          m.content.templateName,\n          'message.messages.content.templateName'\n        );\n        Validator.string(\n          m.content.templateName,\n          'message.messages.content.templateName'\n        );\n        Validator.required(\n          m.content.language,\n          'message.messages.content.language'\n        );\n        Validator.string(\n          m.content.language,\n          'message.messages.content.language'\n        );\n        Validator.required(\n          m.content.templateData,\n          'message.messages.content.templateData'\n        );\n        Validator.object(\n          m.content.templateData,\n          'message.messages.content.templateData'\n        );\n\n        Validator.required(\n          m.content.templateData.body,\n          'message.messages.content.templateData.body'\n        );\n        Validator.object(\n          m.content.templateData.body,\n          'message.messages.content.templateData.body'\n        );\n\n        Validator.required(\n          m.content.templateData.body.placeholders,\n          'message.messages.content.templateData.body.placeholders'\n        );\n        Validator.array(\n          m.content.templateData.body.placeholders,\n          'message.messages.content.templateData.body.placeholders'\n        );\n      });\n      break;\n\n    case 'text':\n      Validator.required(message.content.text, 'message.content.text');\n      Validator.string(message.content.text, 'message.content.text');\n      break;\n\n    case 'document':\n    case 'image':\n    case 'video':\n    case 'audio':\n    case 'sticker':\n      Validator.required(message.content.mediaUrl, 'message.content.mediaUrl');\n      Validator.string(message.content.mediaUrl, 'message.content.mediaUrl');\n      break;\n\n    case 'location':\n      Validator.required(\n        message.content.longitude,\n        'message.content.longitude'\n      );\n      Validator.number(message.content.longitude, 'message.content.longitude');\n\n      Validator.required(message.content.latitude, 'message.content.latitude');\n      Validator.number(message.content.latitude, 'message.content.latitude');\n      break;\n\n    case 'contact':\n      Validator.required(message.content.contacts, 'message.content.contacts');\n      Validator.array(message.content.contacts, 'message.content.contacts');\n\n      message.content.contacts.forEach((contact: any) => {\n        Validator.required(contact.name, 'message.content.contacts.name');\n        Validator.object(contact.name, 'message.content.contacts.name');\n\n        Validator.required(\n          contact.name.firstName,\n          'message.content.contacts.name.firstName'\n        );\n        Validator.string(\n          contact.name.firstName,\n          'message.content.contacts.name.firstName'\n        );\n\n        Validator.required(\n          contact.name.formattedName,\n          'message.content.contacts.name.formattedName'\n        );\n        Validator.string(\n          contact.name.formattedName,\n          'message.content.contacts.name.formattedName'\n        );\n      });\n      break;\n\n    case 'interactive-buttons':\n      Validator.required(\n        message.content.action.buttons,\n        'message.content.action.buttons'\n      );\n      Validator.array(\n        message.content.action.buttons,\n        'message.content.action.buttons'\n      );\n\n      message.content.action.buttons.forEach((button: any) => {\n        Validator.required(button.type, 'message.content.action.buttons.type');\n        Validator.string(button.type, 'message.content.action.buttons.type');\n\n        Validator.required(button.id, 'message.content.action.buttons.id');\n        Validator.string(button.id, 'message.content.action.buttons.id');\n\n        Validator.required(\n          button.title,\n          'message.content.action.buttons.title'\n        );\n        Validator.string(button.title, 'message.content.action.buttons.title');\n      });\n      break;\n\n    case 'interactive-list':\n      Validator.required(\n        message.content.action.title,\n        'message.content.action.title'\n      );\n      Validator.string(\n        message.content.action.title,\n        'message.content.action.title'\n      );\n\n      Validator.required(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n      Validator.array(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n\n      message.content.action.sections.forEach((section: any) => {\n        Validator.required(\n          section.rows,\n          'message.content.action.sections.rows'\n        );\n        Validator.array(section.rows, 'message.content.action.sections.rows');\n\n        section.rows.forEach((row: any) => {\n          Validator.required(row.id, 'message.content.action.sections.rows.id');\n          Validator.string(row.id, 'message.content.action.sections.rows.id');\n\n          Validator.required(\n            row.title,\n            'message.content.action.sections.rows.title'\n          );\n          Validator.string(\n            row.title,\n            'message.content.action.sections.rows.title'\n          );\n        });\n      });\n      break;\n\n    case 'interactive-product':\n      Validator.required(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n      Validator.string(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n\n      Validator.required(\n        message.content.action.productRetailerId,\n        'message.content.action.productRetailerId'\n      );\n      Validator.string(\n        message.content.action.productRetailerId,\n        'message.content.action.productRetailerId'\n      );\n      break;\n\n    case 'interactive-multi-product':\n      Validator.required(message.content.header, 'message.content.header');\n      Validator.object(message.content.header, 'message.content.header');\n\n      Validator.required(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n      Validator.string(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n\n      Validator.required(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n      Validator.string(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n\n      Validator.required(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n      Validator.array(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n\n      message.content.action.sections.forEach((section: any) => {\n        Validator.required(\n          section.productRetailerIds,\n          'message.content.action.sections.productRetailerIds'\n        );\n        Validator.array(\n          section.productRetailerIds,\n          'message.content.action.sections.productRetailerIds'\n        );\n      });\n      break;\n\n    default:\n      throw new Error(\"Invalid message type '\" + message.type + \"'\");\n  }\n\n  return true;\n}\n\nexport function validateWhatsappTemplateCreate(sender: string, request: any) {\n  Validator.required(sender, 'sender');\n  Validator.string(sender, 'sender');\n\n  Validator.required(request.name, 'request.name');\n  Validator.string(request.name, 'request.name');\n\n  Validator.required(request.language, 'request.language');\n  Validator.string(request.language, 'request.language');\n\n  Validator.required(request.category, 'request.category');\n  Validator.string(request.category, 'request.category');\n\n  Validator.required(request.structure, 'request.structure');\n  Validator.object(request.structure, 'request.structure');\n\n  Validator.required(request.structure.body, 'request.structure.body');\n  Validator.object(request.structure.body, 'request.structure.body');\n\n  Validator.required(\n    request.structure.body.text,\n    'request.structure.body.text'\n  );\n  Validator.string(request.structure.body.text, 'request.structure.body.text');\n\n  if (request.structure.header && request.structure.header.format === 'TEXT') {\n    Validator.required(\n      request.structure.header.text,\n      'request.structure.header.text'\n    );\n    Validator.string(\n      request.structure.header.text,\n      'request.structure.header.text'\n    );\n  }\n\n  if (request.structure.footer) {\n    Validator.required(\n      request.structure.footer.text,\n      'request.structure.footer.text'\n    );\n    Validator.string(\n      request.structure.footer.text,\n      'request.structure.footer.text'\n    );\n  }\n\n  if (request.structure.buttons) {\n    Validator.required(request.structure.buttons, 'request.structure.buttons');\n    Validator.array(request.structure.buttons, 'request.structure.buttons');\n\n    request.structure.buttons.forEach((button: any) => {\n      Validator.required(button.text, 'button.text');\n      Validator.string(button.text, 'button.text');\n\n      if (button.type === 'PHONE_NUMBER') {\n        Validator.required(button.phoneNumber, 'button.phoneNumber');\n        Validator.string(button.phoneNumber, 'button.phoneNumber');\n      }\n\n      if (button.type === 'URL') {\n        Validator.required(button.url, 'button.url');\n        Validator.string(button.url, 'button.url');\n      }\n    });\n  }\n\n  return true;\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\nimport {\n  validateWhatsappSend,\n  validateWhatsappTemplateCreate,\n} from '../utils/validators/whatsapp';\n\nconst sendEndpoints: any = {\n  template: '/whatsapp/1/message/template',\n  text: '/whatsapp/1/message/text',\n  document: '/whatsapp/1/message/document',\n  image: '/whatsapp/1/message/image',\n  audio: '/whatsapp/1/message/audio',\n  video: '/whatsapp/1/message/video',\n  sticker: '/whatsapp/1/message/sticker',\n  location: '/whatsapp/1/message/location',\n  contact: '/whatsapp/1/message/contact',\n  'interactive-buttons': '/whatsapp/1/message/interactive/buttons',\n  'interactive-list': '/whatsapp/1/message/interactive/list',\n  'interactive-product': '/whatsapp/1/message/interactive/product',\n  'interactive-multi-product': '/whatsapp/1/message/interactive/multi-product',\n};\n\nconst endpoints: any = {\n  media: '/whatsapp/1/senders/{sender}/media/{mediaId}',\n  read: '/whatsapp/1/senders/{sender}/message/{messageId}/read',\n  template: '/whatsapp/2/senders/{sender}/templates',\n  identity: '/whatsapp/1/{sender}/contacts/{userNumber}/identity',\n};\n\nclass WhatsApp {\n  http: Http;\n  media: any;\n  template: any;\n  identity: any;\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.media = {\n      download: this.downloadMedia.bind(this),\n      metadata: this.metadataMedia.bind(this),\n      delete: this.deleteMedia.bind(this),\n    };\n    this.template = {\n      get: this.getTemplate.bind(this),\n      create: this.createTemplate.bind(this),\n      delete: this.deleteTemplate.bind(this),\n    };\n    this.identity = {\n      get: this.getIdentity.bind(this),\n      confirm: this.confirmIdentity.bind(this),\n    };\n  }\n\n  async send(message: any) {\n    try {\n      if (!sendEndpoints[message.type])\n        throw new Error(\n          `Invalid message type ${\n            message.type\n          }. Supported types are: ${Object.keys(sendEndpoints).join(', ')}.`\n        );\n\n      validateWhatsappSend(message);\n\n      const response = await this.http.post(\n        sendEndpoints[message.type],\n        message\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async downloadMedia(sender: string, mediaId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(mediaId, 'mediaId');\n      Validator.string(mediaId, 'mediaId');\n\n      const response = await this.http.download(\n        endpoints['media']\n          .replace(`{sender}`, sender)\n          .replace('{mediaId}', mediaId)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async metadataMedia(sender: string, mediaId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(mediaId, 'mediaId');\n      Validator.string(mediaId, 'mediaId');\n\n      const response = await this.http.head(\n        endpoints['media']\n          .replace(`{sender}`, sender)\n          .replace('{mediaId}', mediaId)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async deleteMedia(sender: string, url: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(url, 'url');\n      Validator.string(url, 'url');\n\n      const response = await this.http.delete(\n        endpoints['media'].replace('{sender}', sender).replace('{mediaId}', ''),\n        { url }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async markAsRead(sender: string, messageId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(messageId, 'messageId');\n      Validator.string(messageId, 'messageId');\n\n      const response = await this.http.post(\n        endpoints['read']\n          .replace(`{sender}`, sender)\n          .replace('{messageId}', messageId),\n        {}\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getTemplate(sender: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n\n      const response = await this.http.get(\n        endpoints['template'].replace(`{sender}`, sender)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async createTemplate(sender: string, request: any) {\n    try {\n      validateWhatsappTemplateCreate(sender, request);\n\n      const response = await this.http.post(\n        endpoints['template'].replace(`{sender}`, sender),\n        request\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async deleteTemplate(sender: string, templateName: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(templateName, 'templateName');\n      Validator.string(templateName, 'templateName');\n\n      const response = await this.http.delete(\n        `${endpoints['template'].replace(`{sender}`, sender)}/${templateName}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getIdentity(sender: string, userNumber: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(userNumber, 'userNumber');\n      Validator.string(userNumber, 'userNumber');\n\n      const response = await this.http.get(\n        endpoints['identity']\n          .replace(`{sender}`, sender)\n          .replace(`{userNumber}`, userNumber)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async confirmIdentity(\n    sender: string,\n    userNumber: string,\n    hash: string\n  ) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(userNumber, 'userNumber');\n      Validator.string(userNumber, 'userNumber');\n      Validator.required(hash, 'hash');\n      Validator.string(hash, 'hash');\n\n      const response = await this.http.put(\n        endpoints['identity']\n          .replace(`{sender}`, sender)\n          .replace(`{userNumber}`, userNumber),\n        { hash }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { WhatsApp };\n","import { Validator } from '../validator';\n\nexport function validateSMSMessage(message: any) {\n  if (message.type === 'query') {\n    return validateSMSSendQuery(message);\n  } else {\n    return validateSMSSendTextAndBinary(message);\n  }\n}\n\nfunction validateSMSSendTextAndBinary(message: any) {\n  Validator.required(message.messages, 'messages');\n  Validator.array(message.messages, 'messages');\n\n  const tempMessage: any = message;\n  message.messages.forEach((message: any) => {\n    if (tempMessage.type === 'binary') {\n      if (message.binary) {\n        Validator.object(message.binary);\n        Validator.required(message.binary.hex, 'message.binary.hex');\n        Validator.string(message.binary.hex, 'message.binary.hex');\n      }\n    }\n    Validator.required(message, 'message');\n    Validator.object(message, 'message');\n\n    Validator.required(message.destinations, 'message.destinations');\n    Validator.array(message.destinations, 'message.destinations');\n\n    message.destinations.forEach((destination: any) => {\n      Validator.object(destination, 'message.destination');\n      Validator.required(destination.to, 'message.destination.to');\n      Validator.string(destination.to, 'message.destination.to');\n      Validator.maxLength(destination.to, 50, 'message.destination.to');\n    });\n\n    if (message.deliveryTimeWindow) {\n      Validator.required(\n        message.deliveryTimeWindow,\n        'message.deliveryTimeWindow'\n      );\n      Validator.object(\n        message.deliveryTimeWindow,\n        'message.deliveryTimeWindow'\n      );\n\n      Validator.required(\n        message.deliveryTimeWindow.days,\n        'message.deliveryTimeWindow.days'\n      );\n      Validator.array(\n        message.deliveryTimeWindow.days,\n        'message.deliveryTimeWindow.days'\n      );\n\n      message.deliveryTimeWindow.days.forEach((day: any) => {\n        Validator.string(day);\n      });\n\n      if (message.deliveryTimeWindow.from) {\n        Validator.required(\n          message.deliveryTimeWindow.from.hour,\n          'message.deliveryTimeWindow.from.hour'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.from.hour,\n          'message.deliveryTimeWindow.from.hour'\n        );\n\n        Validator.max(\n          message.deliveryTimeWindow.from.hour,\n          23,\n          'message.deliveryTimeWindow.from.hour'\n        );\n\n        Validator.required(\n          message.deliveryTimeWindow.from.minute,\n          'message.deliveryTimeWindow.from.minute'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.from.minute,\n          'message.deliveryTimeWindow.from.minute'\n        );\n        Validator.max(\n          message.deliveryTimeWindow.from.minute,\n          59,\n          'message.deliveryTimeWindow.from.minute'\n        );\n      }\n\n      if (message.deliveryTimeWindow.to) {\n        Validator.required(\n          message.deliveryTimeWindow.to.hour,\n          'message.deliveryTimeWindow.to.hour'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.to.hour,\n          'message.deliveryTimeWindow.to.hour'\n        );\n\n        Validator.max(\n          message.deliveryTimeWindow.to.hour,\n          23,\n          'message.deliveryTimeWindow.to.hour'\n        );\n\n        Validator.required(\n          message.deliveryTimeWindow.to.minute,\n          'message.deliveryTimeWindow.to.minute'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.to.minute,\n          'message.deliveryTimeWindow.to.minute'\n        );\n        Validator.max(\n          message.deliveryTimeWindow.to.minute,\n          59,\n          'message.deliveryTimeWindow.to.minute'\n        );\n      }\n    }\n\n    if (message.regional && message.regional.indiaDlt) {\n      Validator.required(\n        message.regional.indiaDlt.principalEntityId,\n        'message.regional.indiaDlt.principalEntityId'\n      );\n      Validator.string(\n        message.regional.indiaDlt.principalEntityId,\n        'message.regional.indiaDlt.principalEntityId'\n      );\n    }\n  });\n\n  if (message.sendingSpeedLimit) {\n    Validator.required(\n      message.sendingSpeedLimit.amount,\n      'message.sendingSpeedLimit.amount'\n    );\n    Validator.integer(\n      message.sendingSpeedLimit.amount,\n      'message.sendingSpeedLimit.amount'\n    );\n  }\n\n  return true;\n}\n\nfunction validateSMSSendQuery(message: any) {\n  Validator.required(message.username, 'username');\n  Validator.string(message.username, 'username');\n  Validator.required(message.password, 'password');\n  Validator.string(message.password, 'password');\n  Validator.required(message.to, 'to');\n  Validator.array(message.to, 'to');\n  message.to.forEach((to: any) => {\n    Validator.string(to, 'to');\n  });\n\n  return true;\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { validateSMSMessage } from '../utils/validators/sms';\n\nimport { Validator } from '../utils/validator';\n\nconst sendEndpoints: any = {\n  text: '/sms/2/text/advanced',\n  binary: '/sms/2/binary/advanced',\n  query: '/sms/1/text/query',\n};\n\nconst endpoints: any = {\n  preview: '/sms/1/preview',\n  get: '/sms/1/inbox/reports',\n  reports: '/sms/1/reports',\n  logs: '/sms/1/logs',\n  schedule: '/sms/1/bulks',\n  status: '/sms/1/bulks/status',\n};\n\nclass SMS {\n  http: Http;\n  username?: string;\n  password?: string;\n  reports: any;\n  logs: any;\n  scheduled: any;\n  status: any;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.username = credentials.username;\n    this.password = credentials.password;\n\n    this.reports = {\n      get: this.getDeliveryReports.bind(this),\n    };\n    this.logs = {\n      get: this.getMessageLogs.bind(this),\n    };\n    this.scheduled = {\n      get: this.getScheduledMessage.bind(this),\n      reschedule: this.rescheduleMessage.bind(this),\n    };\n    this.status = {\n      get: this.getMessageStatus.bind(this),\n      update: this.updateMessageStatus.bind(this),\n    };\n  }\n\n  async send(message: any) {\n    try {\n      if (!message.type) message.type = 'text';\n      if (!sendEndpoints[message.type])\n        throw new Error(\n          `Invalid message type ${\n            message.type\n          }. Supported types are: ${Object.keys(sendEndpoints).join(', ')}.`\n        );\n\n      let response;\n      if (message.type === 'query') {\n        if (this.username && this.password) {\n          message.username = this.username;\n          message.password = this.password;\n        }\n\n        validateSMSMessage(message);\n        message.to = message.to.join(',');\n\n        response = await this.http.get(sendEndpoints[message.type], message);\n      } else {\n        validateSMSMessage(message);\n\n        response = await this.http.post(sendEndpoints[message.type], message);\n      }\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async preview(message: any) {\n    try {\n      Validator.requiredString(message.text, 'message.text');\n      const response = await this.http.post(endpoints.preview, message);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async get(limit?: number) {\n    try {\n      const response = await this.http.get(endpoints.get, { limit });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * See the status and the scheduled time of your SMS messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async getScheduledMessage(bulkId: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.schedule, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change the date and time for sending scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @param { string } sendAt - Date and time when the message is to be sent.\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async rescheduleMessage(bulkId: string, sendAt: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n      Validator.requiredString(sendAt, 'sendAt');\n\n      const queryString = new URLSearchParams({ bulkId });\n      const response = await this.http.put(\n        endpoints.schedule + `/?${queryString}`,\n        { sendAt }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * See the status of scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async getMessageStatus(bulkId: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.status, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change status or completely cancel sending of scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @param { string } status - The status of the message(s).\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async updateMessageStatus(bulkId: string, status: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n      Validator.requiredString(status, 'status');\n\n      const queryString = new URLSearchParams({ bulkId });\n      const response = await this.http.put(\n        endpoints.status + `/?${queryString}`,\n        { status }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getDeliveryReports(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.reports, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getMessageLogs(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.logs, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { SMS };\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { AuthType } from '../utils/auth-type';\nimport { URLSearchParams } from 'url';\nimport { Validator } from '../utils/validator';\n\nconst endpoints: any = {\n  session: '/auth/1/session',\n  oauth2: '/auth/1/oauth2/token',\n};\n\nclass Auth {\n  ibsso: any;\n  oauth2: any;\n  credentials: InfobipAuth;\n\n  constructor(credentials: InfobipAuth) {\n    this.credentials = credentials;\n    this.ibsso = {\n      create: this.createSession.bind(this),\n      destroy: this.destroySession.bind(this),\n    };\n\n    this.oauth2 = {\n      create: this.createToken.bind(this),\n    };\n  }\n\n  private async createSession() {\n    try {\n      Validator.required(this.credentials.password, 'Infobip.password');\n      Validator.required(this.credentials.username, 'Infobip.username');\n\n      const http = new Http(this.credentials.baseUrl);\n      const response = await http.post(endpoints.session, {\n        password: this.credentials.password,\n        username: this.credentials.username,\n      });\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async destroySession(ibssoToken: string) {\n    try {\n      const http = new Http(\n        this.credentials.baseUrl,\n        `${AuthType.IBSSO} ${ibssoToken}`\n      );\n      const response = await http.delete(endpoints.session);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async createToken() {\n    try {\n      Validator.required(this.credentials.password, 'Infobip.password');\n      Validator.required(this.credentials.username, 'Infobip.username');\n\n      const http = new Http(this.credentials.baseUrl);\n      const response = await http.post(\n        `${endpoints.oauth2}?${new URLSearchParams({\n          client_secret: this.credentials.password as string,\n          client_id: this.credentials.username as string,\n          grant_type: 'client_credentials',\n        }).toString()}`,\n        {},\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        }\n      );\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { Auth };\n","export function FormDataBuilder(formData: any, data: any, parentKey?: string) {\n  if (typeof data === 'object') {\n    Object.keys(data).forEach(key => {\n      FormDataBuilder(\n        formData,\n        data[key],\n        parentKey ? `${parentKey}['${key}']` : key\n      );\n    });\n  } else {\n    formData.append(parentKey, data);\n  }\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\n\nconst endpoints: any = {\n  domain: '/email/1/domains',\n  verify: '/email/1/domains/{domainName}/verify',\n  tracking: '/email/1/domains/{domainName}/tracking',\n};\n\nclass EmailDomain {\n  http: Http;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n  }\n\n  async get(filter?: any) {\n    try {\n      let response;\n      if (typeof filter === 'string') {\n        response = await this.http.get(`${endpoints.domain}/${filter}`);\n      } else {\n        response = await this.http.get(endpoints.domain, filter);\n      }\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async add(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.post(endpoints.domain, { domainName });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async verify(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.post(\n        endpoints.verify.replace('{domainName}', domainName),\n        {}\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async tracking(domainName: string, request: any) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.put(\n        endpoints.tracking.replace('{domainName}', domainName),\n        request\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async delete(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.delete(\n        `${endpoints.domain}/${domainName}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { EmailDomain };\n","import FormData from 'form-data';\n\nimport { Http } from '../utils/http';\nimport { FormDataBuilder } from '../utils/form-data';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\nimport { EmailStatus } from '../utils/email-status-type';\nimport { EmailDomain } from './email-domain';\n\nconst endpoints: any = {\n  send: '/email/3/send',\n  validate: '/email/2/validation',\n  bulk: '/email/1/bulks',\n  report: '/email/1/reports',\n  status: '/email/1/bulks/status',\n  log: '/email/1/logs',\n};\n\nclass Email {\n  http: Http;\n  status: any;\n  report: any;\n  log: any;\n  domain: EmailDomain;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.domain = new EmailDomain(credentials);\n\n    this.log = {\n      get: this.getLog.bind(this),\n    };\n\n    this.report = {\n      get: this.getReport.bind(this),\n    };\n\n    this.status = {\n      get: this.getStatus.bind(this),\n      update: this.updateStatus.bind(this),\n    };\n  }\n\n  async send(email: any) {\n    try {\n      Validator.required(email.to, 'email.to');\n      Validator.string(email.to, 'email.to');\n\n      Validator.required(email.from, 'email.from');\n      Validator.string(email.from, 'email.from');\n\n      if (!email.templateId) {\n        Validator.required(email.subject, 'email.subject');\n        Validator.string(email.subject, 'email.subject');\n      }\n\n      if (!(email.text || email.html || email.templateId))\n        throw new Error(\n          'Email must contain at least one of these (text, html or templateId).'\n        );\n\n      let form = new FormData();\n      FormDataBuilder(form, email);\n\n      const response = await this.http.post(endpoints.send, form, {\n        headers: form.getHeaders(),\n      });\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async validate(to: string) {\n    try {\n      Validator.required(to, 'to');\n      Validator.string(to, 'to');\n\n      const response = await this.http.post(endpoints.validate, { to });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async get(bulkId: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.bulk, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async reschedule(bulkId: string, sendAt: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      Validator.required(sendAt, 'sendAt');\n      Validator.string(sendAt, 'sendAt');\n\n      const response = await this.http.put(\n        `${endpoints.bulk}?bulkId=${bulkId}`,\n        { sendAt }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getReport(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.report, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getLog(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.log, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getStatus(bulkId: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.status, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async updateStatus(bulkId: string, status: EmailStatus) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      Validator.required(status, 'status');\n      Validator.oneOf(status, EmailStatus, 'status');\n\n      const response = await this.http.put(\n        `${endpoints.status}?bulkId=${bulkId}`,\n        { status }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { Email };\n","import { AuthType } from './utils/auth-type';\nimport { EmailStatus } from './utils/email-status-type';\nimport { InfobipAuth } from './utils/auth';\nimport { Validator } from './utils/validator';\nimport { WhatsApp } from './apis/whatsapp';\nimport { SMS } from './apis/sms';\nimport { Auth } from './apis/auth';\nimport { Email } from './apis/email';\n\nclass Infobip {\n  /**\n   *\n   * @param {InfobipAuth} config - Configuration object for Infobip API\n   *\n   */\n\n  credentials: InfobipAuth;\n  channels: any;\n  auth: any;\n\n  constructor({\n    baseUrl,\n    authType,\n    apiKey,\n    username,\n    password,\n    oauthToken,\n    ibssoToken,\n  }: InfobipAuth) {\n    Validator.required(baseUrl, 'Infobip.baseUrl');\n    Validator.required(authType, 'Infobip.authType');\n\n    password && Validator.string(password, 'Infobip.password');\n    username && Validator.string(username, 'Infobip.username');\n    apiKey && Validator.string(apiKey, 'Infobip.apiKey');\n    oauthToken && Validator.string(oauthToken, 'Infobip.oauthToken');\n    ibssoToken && Validator.string(ibssoToken, 'Infobip.ibssoToken');\n\n    this.credentials = new InfobipAuth({\n      baseUrl,\n      authType,\n      apiKey,\n      username,\n      password,\n      oauthToken,\n      ibssoToken,\n    });\n    this.channels = {\n      whatsapp: new WhatsApp(this.credentials),\n      email: new Email(this.credentials),\n      sms: new SMS(this.credentials),\n    };\n    this.auth = new Auth(this.credentials);\n  }\n}\n\nexport { Infobip, AuthType, EmailStatus };\n"],"names":["AuthType","EmailStatus","Validator","required","x","name","undefined","Error","string","number","integer","Number","isInteger","object","array","Array","isArray","oneOf","y","Object","values","includes","join","maxLength","length","max","requiredString","InfobipAuth","baseUrl","authType","ApiKey","apiKey","username","password","ibssoToken","oauthToken","authorization","Basic","Buffer","from","toString","IBSSO","OAuth","Http","indexOf","axios","create","baseURL","headers","Authorization","post","url","body","config","response","put","get","params","download","responseType","head","data","validateWhatsappSend","message","type","to","content","text","header","mediaUrl","footer","action","messages","forEach","m","templateName","language","templateData","placeholders","longitude","latitude","contacts","contact","firstName","formattedName","buttons","button","id","title","sections","section","rows","row","catalogId","productRetailerId","productRetailerIds","validateWhatsappTemplateCreate","sender","request","category","structure","format","phoneNumber","sendEndpoints","template","document","image","audio","video","sticker","location","endpoints","media","read","identity","WhatsApp","credentials","http","downloadMedia","bind","metadata","metadataMedia","deleteMedia","getTemplate","createTemplate","deleteTemplate","getIdentity","confirm","confirmIdentity","send","keys","mediaId","replace","markAsRead","messageId","userNumber","hash","validateSMSMessage","validateSMSSendQuery","validateSMSSendTextAndBinary","tempMessage","binary","hex","destinations","destination","deliveryTimeWindow","days","day","hour","minute","regional","indiaDlt","principalEntityId","sendingSpeedLimit","amount","query","preview","reports","logs","schedule","status","SMS","getDeliveryReports","getMessageLogs","scheduled","getScheduledMessage","reschedule","rescheduleMessage","getMessageStatus","update","updateMessageStatus","limit","bulkId","sendAt","queryString","URLSearchParams","filter","session","oauth2","Auth","ibsso","createSession","destroy","destroySession","createToken","client_secret","client_id","grant_type","FormDataBuilder","formData","parentKey","key","append","domain","verify","tracking","EmailDomain","add","domainName","validate","bulk","report","log","Email","getLog","getReport","getStatus","updateStatus","email","templateId","subject","html","form","FormData","getHeaders","Infobip","channels","whatsapp","sms","auth"],"mappings":"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"}