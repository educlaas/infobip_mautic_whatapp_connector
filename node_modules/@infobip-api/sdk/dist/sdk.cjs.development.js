'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));
var url = require('url');
var FormData = _interopDefault(require('form-data'));

(function (AuthType) {
  AuthType["Basic"] = "Basic";
  AuthType["ApiKey"] = "App";
  AuthType["IBSSO"] = "IBSSO";
  AuthType["OAuth"] = "Bearer";
})(exports.AuthType || (exports.AuthType = {}));

(function (EmailStatus) {
  EmailStatus["Pending"] = "PENDING";
  EmailStatus["Paused"] = "PAUSED";
  EmailStatus["Processing"] = "PROCESSING";
  EmailStatus["Canceled"] = "CANCELED";
  EmailStatus["Finished"] = "FINISHED";
  EmailStatus["Failed"] = "FAILED";
})(exports.EmailStatus || (exports.EmailStatus = {}));

var Validator;

(function (Validator) {
  function required(x, name) {
    if (x === undefined || x === null || x === '') {
      throw new Error(name + " is required.");
    }

    return true;
  }

  Validator.required = required;

  function string(x, name) {
    if (typeof x !== 'string' || x === '') {
      throw new Error(name + " must be a string.");
    }

    return true;
  }

  Validator.string = string;

  function number(x, name) {
    if (typeof x !== 'number') {
      throw new Error(name + " must be a number.");
    }

    return true;
  }

  Validator.number = number;

  function integer(x, name) {
    if (!Number.isInteger(x)) {
      throw new Error(name + " must be an integer.");
    }

    return true;
  }

  Validator.integer = integer;

  function object(x, name) {
    if (typeof x !== 'object') {
      throw new Error(name + " must be an object.");
    }

    return true;
  }

  Validator.object = object;

  function array(x, name) {
    if (!Array.isArray(x)) {
      throw new Error(name + " must be an array.");
    }

    return true;
  }

  Validator.array = array;

  function oneOf(x, y, name) {
    if (!Object.values(y).includes(x)) {
      throw new Error(name + " must be one of " + Object.values(y).join(', ') + ".");
    }

    return true;
  }

  Validator.oneOf = oneOf;

  function maxLength(x, y, name) {
    if (x.length > y) {
      throw new Error(name + " must have a length smaller than or equal to " + y + ".");
    }

    return true;
  }

  Validator.maxLength = maxLength;

  function max(x, y, name) {
    if (x > y) {
      throw new Error(name + " must be lower than or equal to " + y + ".");
    }

    return true;
  }

  Validator.max = max;

  function requiredString(x, name) {
    return required(x, name) && string(x, name);
  }

  Validator.requiredString = requiredString;
})(Validator || (Validator = {}));

var InfobipAuth = function InfobipAuth(_ref) {
  var baseUrl = _ref.baseUrl,
      _ref$authType = _ref.authType,
      authType = _ref$authType === void 0 ? exports.AuthType.ApiKey : _ref$authType,
      _ref$apiKey = _ref.apiKey,
      apiKey = _ref$apiKey === void 0 ? '' : _ref$apiKey,
      _ref$username = _ref.username,
      username = _ref$username === void 0 ? '' : _ref$username,
      _ref$password = _ref.password,
      password = _ref$password === void 0 ? '' : _ref$password,
      _ref$ibssoToken = _ref.ibssoToken,
      ibssoToken = _ref$ibssoToken === void 0 ? '' : _ref$ibssoToken,
      _ref$oauthToken = _ref.oauthToken,
      oauthToken = _ref$oauthToken === void 0 ? '' : _ref$oauthToken;
  this.baseUrl = baseUrl;
  this.authType = authType;
  this.apiKey = apiKey;
  this.username = username;
  this.password = password;
  this.ibssoToken = ibssoToken;
  this.oauthToken = oauthToken;

  switch (authType) {
    case exports.AuthType.ApiKey:
      Validator.required(apiKey, 'When using AuthType.ApiKey, Infobip.apiKey');
      this.authorization = authType + " " + apiKey;
      break;

    case exports.AuthType.Basic:
      Validator.required(username, 'When using AuthType.Basic, Infobip.username');
      Validator.required(password, 'When using AuthType.Basic, Infobip.password');
      this.authorization = authType + " " + Buffer.from(username + ":" + password).toString('base64');
      break;

    case exports.AuthType.IBSSO:
      Validator.required(ibssoToken, 'When using AuthType.IBSSO, Infobip.ibssoToken');
      this.authorization = authType + " " + ibssoToken;
      break;

    case exports.AuthType.OAuth:
      Validator.required(oauthToken, 'When using AuthType.OAuth, Infobip.oauthToken');
      this.authorization = authType + " " + oauthToken;
      break;

    default:
      this.authorization = '';
      throw new Error("Invalid authentication type: " + authType + ". The only supported types are: " + exports.AuthType.ApiKey + ", " + exports.AuthType.Basic + ", " + exports.AuthType.IBSSO + ", " + exports.AuthType.OAuth);
  }
};

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var Http = /*#__PURE__*/function () {
  function Http(baseUrl, authorization) {
    this.baseUrl = !baseUrl.indexOf('http') ? baseUrl : "https://" + baseUrl;
    this.axios = axios.create({
      baseURL: this.baseUrl,
      headers: {
        'Content-Type': 'application/json',
        Authorization: "" + authorization
      }
    });
  }

  var _proto = Http.prototype;

  _proto.post = /*#__PURE__*/function () {
    var _post = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, body, config) {
      var response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.axios.post(url, body, config);

            case 2:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function post(_x, _x2, _x3) {
      return _post.apply(this, arguments);
    }

    return post;
  }();

  _proto.put = /*#__PURE__*/function () {
    var _put = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, body) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.axios.put(url, body);

            case 2:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function put(_x4, _x5) {
      return _put.apply(this, arguments);
    }

    return put;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, params) {
      var response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.axios.get(url, {
                params: params
              });

            case 2:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function get(_x6, _x7) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.download = /*#__PURE__*/function () {
    var _download = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(url) {
      var response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.axios.get(url, {
                responseType: 'stream'
              });

            case 2:
              response = _context4.sent;
              return _context4.abrupt("return", response);

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function download(_x8) {
      return _download.apply(this, arguments);
    }

    return download;
  }();

  _proto.head = /*#__PURE__*/function () {
    var _head = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(url, params) {
      var response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.axios.head(url, {
                params: params
              });

            case 2:
              response = _context5.sent;
              return _context5.abrupt("return", response);

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function head(_x9, _x10) {
      return _head.apply(this, arguments);
    }

    return head;
  }();

  _proto["delete"] = /*#__PURE__*/function () {
    var _delete2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(url, body) {
      var response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.axios["delete"](url, {
                data: body
              });

            case 2:
              response = _context6.sent;
              return _context6.abrupt("return", response);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function _delete(_x11, _x12) {
      return _delete2.apply(this, arguments);
    }

    return _delete;
  }();

  return Http;
}();

function validateWhatsappSend(message) {
  if (message.type !== 'template') {
    Validator.required(message.from, 'message.from');
    Validator.string(message.from, 'message.from');
    Validator.required(message.to, 'message.to');
    Validator.string(message.to, 'message.to');
    Validator.required(message.content, 'message.content');
    Validator.object(message.content, 'message.content');
  }

  if (message.type === 'interactive-buttons' || message.type === 'interactive-list' || message.type === 'interactive-multi-product' || message.type === 'interactive-product') {
    if (message.type !== 'interactive-product') {
      Validator.required(message.content.body, 'message.content.body');
      Validator.object(message.content.body, 'message.content.body');
      Validator.required(message.content.body.text, 'message.content.body.text');
      Validator.string(message.content.body.text, 'message.content.body.text');
    }

    if (message.content.header) {
      Validator.required(message.content.header.type, 'message.content.header.type');
      Validator.string(message.content.header.type, 'message.content.header.type');

      if (message.content.header.type === 'TEXT') {
        Validator.required(message.content.header.text, 'message.content.header.text');
        Validator.string(message.content.header.text, 'message.content.header.text');
      }

      if (message.content.header.type === 'VIDEO' || message.content.header.type === 'IMAGE' || message.content.header.type === 'DOCUMENT') {
        Validator.required(message.content.header.mediaUrl, 'message.content.header.mediaUrl');
        Validator.string(message.content.header.mediaUrl, 'message.content.header.mediaUrl');
      }
    }

    if (message.content.footer) {
      Validator.required(message.content.footer.text, 'message.content.footer.text');
      Validator.string(message.content.footer.text, 'message.content.footer.text');
    }

    Validator.required(message.content.action, 'message.content.action');
    Validator.object(message.content.action, 'message.content.action');
  }

  switch (message.type) {
    case 'template':
      Validator.required(message.messages, 'message.messages');
      Validator.array(message.messages, 'message.messages');
      message.messages.forEach(function (m) {
        Validator.required(m.from, 'message.messages.from');
        Validator.string(m.from, 'message.messages.from');
        Validator.required(m.to, 'message.messages.to');
        Validator.string(m.to, 'message.messages.to');
        Validator.required(m.content, 'message.messages.content');
        Validator.object(m.content, 'message.messages.content');
        Validator.required(m.content.templateName, 'message.messages.content.templateName');
        Validator.string(m.content.templateName, 'message.messages.content.templateName');
        Validator.required(m.content.language, 'message.messages.content.language');
        Validator.string(m.content.language, 'message.messages.content.language');
        Validator.required(m.content.templateData, 'message.messages.content.templateData');
        Validator.object(m.content.templateData, 'message.messages.content.templateData');
        Validator.required(m.content.templateData.body, 'message.messages.content.templateData.body');
        Validator.object(m.content.templateData.body, 'message.messages.content.templateData.body');
        Validator.required(m.content.templateData.body.placeholders, 'message.messages.content.templateData.body.placeholders');
        Validator.array(m.content.templateData.body.placeholders, 'message.messages.content.templateData.body.placeholders');
      });
      break;

    case 'text':
      Validator.required(message.content.text, 'message.content.text');
      Validator.string(message.content.text, 'message.content.text');
      break;

    case 'document':
    case 'image':
    case 'video':
    case 'audio':
    case 'sticker':
      Validator.required(message.content.mediaUrl, 'message.content.mediaUrl');
      Validator.string(message.content.mediaUrl, 'message.content.mediaUrl');
      break;

    case 'location':
      Validator.required(message.content.longitude, 'message.content.longitude');
      Validator.number(message.content.longitude, 'message.content.longitude');
      Validator.required(message.content.latitude, 'message.content.latitude');
      Validator.number(message.content.latitude, 'message.content.latitude');
      break;

    case 'contact':
      Validator.required(message.content.contacts, 'message.content.contacts');
      Validator.array(message.content.contacts, 'message.content.contacts');
      message.content.contacts.forEach(function (contact) {
        Validator.required(contact.name, 'message.content.contacts.name');
        Validator.object(contact.name, 'message.content.contacts.name');
        Validator.required(contact.name.firstName, 'message.content.contacts.name.firstName');
        Validator.string(contact.name.firstName, 'message.content.contacts.name.firstName');
        Validator.required(contact.name.formattedName, 'message.content.contacts.name.formattedName');
        Validator.string(contact.name.formattedName, 'message.content.contacts.name.formattedName');
      });
      break;

    case 'interactive-buttons':
      Validator.required(message.content.action.buttons, 'message.content.action.buttons');
      Validator.array(message.content.action.buttons, 'message.content.action.buttons');
      message.content.action.buttons.forEach(function (button) {
        Validator.required(button.type, 'message.content.action.buttons.type');
        Validator.string(button.type, 'message.content.action.buttons.type');
        Validator.required(button.id, 'message.content.action.buttons.id');
        Validator.string(button.id, 'message.content.action.buttons.id');
        Validator.required(button.title, 'message.content.action.buttons.title');
        Validator.string(button.title, 'message.content.action.buttons.title');
      });
      break;

    case 'interactive-list':
      Validator.required(message.content.action.title, 'message.content.action.title');
      Validator.string(message.content.action.title, 'message.content.action.title');
      Validator.required(message.content.action.sections, 'message.content.action.sections');
      Validator.array(message.content.action.sections, 'message.content.action.sections');
      message.content.action.sections.forEach(function (section) {
        Validator.required(section.rows, 'message.content.action.sections.rows');
        Validator.array(section.rows, 'message.content.action.sections.rows');
        section.rows.forEach(function (row) {
          Validator.required(row.id, 'message.content.action.sections.rows.id');
          Validator.string(row.id, 'message.content.action.sections.rows.id');
          Validator.required(row.title, 'message.content.action.sections.rows.title');
          Validator.string(row.title, 'message.content.action.sections.rows.title');
        });
      });
      break;

    case 'interactive-product':
      Validator.required(message.content.action.catalogId, 'message.content.action.catalogId');
      Validator.string(message.content.action.catalogId, 'message.content.action.catalogId');
      Validator.required(message.content.action.productRetailerId, 'message.content.action.productRetailerId');
      Validator.string(message.content.action.productRetailerId, 'message.content.action.productRetailerId');
      break;

    case 'interactive-multi-product':
      Validator.required(message.content.header, 'message.content.header');
      Validator.object(message.content.header, 'message.content.header');
      Validator.required(message.content.header.type, 'message.content.header.type');
      Validator.string(message.content.header.type, 'message.content.header.type');
      Validator.required(message.content.action.catalogId, 'message.content.action.catalogId');
      Validator.string(message.content.action.catalogId, 'message.content.action.catalogId');
      Validator.required(message.content.action.sections, 'message.content.action.sections');
      Validator.array(message.content.action.sections, 'message.content.action.sections');
      message.content.action.sections.forEach(function (section) {
        Validator.required(section.productRetailerIds, 'message.content.action.sections.productRetailerIds');
        Validator.array(section.productRetailerIds, 'message.content.action.sections.productRetailerIds');
      });
      break;

    default:
      throw new Error("Invalid message type '" + message.type + "'");
  }

  return true;
}
function validateWhatsappTemplateCreate(sender, request) {
  Validator.required(sender, 'sender');
  Validator.string(sender, 'sender');
  Validator.required(request.name, 'request.name');
  Validator.string(request.name, 'request.name');
  Validator.required(request.language, 'request.language');
  Validator.string(request.language, 'request.language');
  Validator.required(request.category, 'request.category');
  Validator.string(request.category, 'request.category');
  Validator.required(request.structure, 'request.structure');
  Validator.object(request.structure, 'request.structure');
  Validator.required(request.structure.body, 'request.structure.body');
  Validator.object(request.structure.body, 'request.structure.body');
  Validator.required(request.structure.body.text, 'request.structure.body.text');
  Validator.string(request.structure.body.text, 'request.structure.body.text');

  if (request.structure.header && request.structure.header.format === 'TEXT') {
    Validator.required(request.structure.header.text, 'request.structure.header.text');
    Validator.string(request.structure.header.text, 'request.structure.header.text');
  }

  if (request.structure.footer) {
    Validator.required(request.structure.footer.text, 'request.structure.footer.text');
    Validator.string(request.structure.footer.text, 'request.structure.footer.text');
  }

  if (request.structure.buttons) {
    Validator.required(request.structure.buttons, 'request.structure.buttons');
    Validator.array(request.structure.buttons, 'request.structure.buttons');
    request.structure.buttons.forEach(function (button) {
      Validator.required(button.text, 'button.text');
      Validator.string(button.text, 'button.text');

      if (button.type === 'PHONE_NUMBER') {
        Validator.required(button.phoneNumber, 'button.phoneNumber');
        Validator.string(button.phoneNumber, 'button.phoneNumber');
      }

      if (button.type === 'URL') {
        Validator.required(button.url, 'button.url');
        Validator.string(button.url, 'button.url');
      }
    });
  }

  return true;
}

var sendEndpoints = {
  template: '/whatsapp/1/message/template',
  text: '/whatsapp/1/message/text',
  document: '/whatsapp/1/message/document',
  image: '/whatsapp/1/message/image',
  audio: '/whatsapp/1/message/audio',
  video: '/whatsapp/1/message/video',
  sticker: '/whatsapp/1/message/sticker',
  location: '/whatsapp/1/message/location',
  contact: '/whatsapp/1/message/contact',
  'interactive-buttons': '/whatsapp/1/message/interactive/buttons',
  'interactive-list': '/whatsapp/1/message/interactive/list',
  'interactive-product': '/whatsapp/1/message/interactive/product',
  'interactive-multi-product': '/whatsapp/1/message/interactive/multi-product'
};
var endpoints = {
  media: '/whatsapp/1/senders/{sender}/media/{mediaId}',
  read: '/whatsapp/1/senders/{sender}/message/{messageId}/read',
  template: '/whatsapp/2/senders/{sender}/templates',
  identity: '/whatsapp/1/{sender}/contacts/{userNumber}/identity'
};

var WhatsApp = /*#__PURE__*/function () {
  function WhatsApp(credentials) {
    this.http = new Http(credentials.baseUrl, credentials.authorization);
    this.media = {
      download: this.downloadMedia.bind(this),
      metadata: this.metadataMedia.bind(this),
      "delete": this.deleteMedia.bind(this)
    };
    this.template = {
      get: this.getTemplate.bind(this),
      create: this.createTemplate.bind(this),
      "delete": this.deleteTemplate.bind(this)
    };
    this.identity = {
      get: this.getIdentity.bind(this),
      confirm: this.confirmIdentity.bind(this)
    };
  }

  var _proto = WhatsApp.prototype;

  _proto.send = /*#__PURE__*/function () {
    var _send = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message) {
      var response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (sendEndpoints[message.type]) {
                _context.next = 3;
                break;
              }

              throw new Error("Invalid message type " + message.type + ". Supported types are: " + Object.keys(sendEndpoints).join(', ') + ".");

            case 3:
              validateWhatsappSend(message);
              _context.next = 6;
              return this.http.post(sendEndpoints[message.type], message);

            case 6:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", _context.t0);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 10]]);
    }));

    function send(_x) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  _proto.downloadMedia = /*#__PURE__*/function () {
    var _downloadMedia = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sender, mediaId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(mediaId, 'mediaId');
              Validator.string(mediaId, 'mediaId');
              _context2.next = 7;
              return this.http.download(endpoints['media'].replace("{sender}", sender).replace('{mediaId}', mediaId));

            case 7:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", _context2.t0);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 11]]);
    }));

    function downloadMedia(_x2, _x3) {
      return _downloadMedia.apply(this, arguments);
    }

    return downloadMedia;
  }();

  _proto.metadataMedia = /*#__PURE__*/function () {
    var _metadataMedia = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(sender, mediaId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(mediaId, 'mediaId');
              Validator.string(mediaId, 'mediaId');
              _context3.next = 7;
              return this.http.head(endpoints['media'].replace("{sender}", sender).replace('{mediaId}', mediaId));

            case 7:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", _context3.t0);

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 11]]);
    }));

    function metadataMedia(_x4, _x5) {
      return _metadataMedia.apply(this, arguments);
    }

    return metadataMedia;
  }();

  _proto.deleteMedia = /*#__PURE__*/function () {
    var _deleteMedia = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(sender, url) {
      var response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(url, 'url');
              Validator.string(url, 'url');
              _context4.next = 7;
              return this.http["delete"](endpoints['media'].replace('{sender}', sender).replace('{mediaId}', ''), {
                url: url
              });

            case 7:
              response = _context4.sent;
              return _context4.abrupt("return", response);

            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](0);
              return _context4.abrupt("return", _context4.t0);

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 11]]);
    }));

    function deleteMedia(_x6, _x7) {
      return _deleteMedia.apply(this, arguments);
    }

    return deleteMedia;
  }();

  _proto.markAsRead = /*#__PURE__*/function () {
    var _markAsRead = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(sender, messageId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(messageId, 'messageId');
              Validator.string(messageId, 'messageId');
              _context5.next = 7;
              return this.http.post(endpoints['read'].replace("{sender}", sender).replace('{messageId}', messageId), {});

            case 7:
              response = _context5.sent;
              return _context5.abrupt("return", response);

            case 11:
              _context5.prev = 11;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", _context5.t0);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 11]]);
    }));

    function markAsRead(_x8, _x9) {
      return _markAsRead.apply(this, arguments);
    }

    return markAsRead;
  }();

  _proto.getTemplate = /*#__PURE__*/function () {
    var _getTemplate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(sender) {
      var response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              _context6.next = 5;
              return this.http.get(endpoints['template'].replace("{sender}", sender));

            case 5:
              response = _context6.sent;
              return _context6.abrupt("return", response);

            case 9:
              _context6.prev = 9;
              _context6.t0 = _context6["catch"](0);
              return _context6.abrupt("return", _context6.t0);

            case 12:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 9]]);
    }));

    function getTemplate(_x10) {
      return _getTemplate.apply(this, arguments);
    }

    return getTemplate;
  }();

  _proto.createTemplate = /*#__PURE__*/function () {
    var _createTemplate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(sender, request) {
      var response;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              validateWhatsappTemplateCreate(sender, request);
              _context7.next = 4;
              return this.http.post(endpoints['template'].replace("{sender}", sender), request);

            case 4:
              response = _context7.sent;
              return _context7.abrupt("return", response);

            case 8:
              _context7.prev = 8;
              _context7.t0 = _context7["catch"](0);
              return _context7.abrupt("return", _context7.t0);

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 8]]);
    }));

    function createTemplate(_x11, _x12) {
      return _createTemplate.apply(this, arguments);
    }

    return createTemplate;
  }();

  _proto.deleteTemplate = /*#__PURE__*/function () {
    var _deleteTemplate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(sender, templateName) {
      var response;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(templateName, 'templateName');
              Validator.string(templateName, 'templateName');
              _context8.next = 7;
              return this.http["delete"](endpoints['template'].replace("{sender}", sender) + "/" + templateName);

            case 7:
              response = _context8.sent;
              return _context8.abrupt("return", response);

            case 11:
              _context8.prev = 11;
              _context8.t0 = _context8["catch"](0);
              return _context8.abrupt("return", _context8.t0);

            case 14:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[0, 11]]);
    }));

    function deleteTemplate(_x13, _x14) {
      return _deleteTemplate.apply(this, arguments);
    }

    return deleteTemplate;
  }();

  _proto.getIdentity = /*#__PURE__*/function () {
    var _getIdentity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(sender, userNumber) {
      var response;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(userNumber, 'userNumber');
              Validator.string(userNumber, 'userNumber');
              _context9.next = 7;
              return this.http.get(endpoints['identity'].replace("{sender}", sender).replace("{userNumber}", userNumber));

            case 7:
              response = _context9.sent;
              return _context9.abrupt("return", response);

            case 11:
              _context9.prev = 11;
              _context9.t0 = _context9["catch"](0);
              return _context9.abrupt("return", _context9.t0);

            case 14:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 11]]);
    }));

    function getIdentity(_x15, _x16) {
      return _getIdentity.apply(this, arguments);
    }

    return getIdentity;
  }();

  _proto.confirmIdentity = /*#__PURE__*/function () {
    var _confirmIdentity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(sender, userNumber, hash) {
      var response;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.prev = 0;
              Validator.required(sender, 'sender');
              Validator.string(sender, 'sender');
              Validator.required(userNumber, 'userNumber');
              Validator.string(userNumber, 'userNumber');
              Validator.required(hash, 'hash');
              Validator.string(hash, 'hash');
              _context10.next = 9;
              return this.http.put(endpoints['identity'].replace("{sender}", sender).replace("{userNumber}", userNumber), {
                hash: hash
              });

            case 9:
              response = _context10.sent;
              return _context10.abrupt("return", response);

            case 13:
              _context10.prev = 13;
              _context10.t0 = _context10["catch"](0);
              return _context10.abrupt("return", _context10.t0);

            case 16:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[0, 13]]);
    }));

    function confirmIdentity(_x17, _x18, _x19) {
      return _confirmIdentity.apply(this, arguments);
    }

    return confirmIdentity;
  }();

  return WhatsApp;
}();

function validateSMSMessage(message) {
  if (message.type === 'query') {
    return validateSMSSendQuery(message);
  } else {
    return validateSMSSendTextAndBinary(message);
  }
}

function validateSMSSendTextAndBinary(message) {
  Validator.required(message.messages, 'messages');
  Validator.array(message.messages, 'messages');
  var tempMessage = message;
  message.messages.forEach(function (message) {
    if (tempMessage.type === 'binary') {
      if (message.binary) {
        Validator.object(message.binary);
        Validator.required(message.binary.hex, 'message.binary.hex');
        Validator.string(message.binary.hex, 'message.binary.hex');
      }
    }

    Validator.required(message, 'message');
    Validator.object(message, 'message');
    Validator.required(message.destinations, 'message.destinations');
    Validator.array(message.destinations, 'message.destinations');
    message.destinations.forEach(function (destination) {
      Validator.object(destination, 'message.destination');
      Validator.required(destination.to, 'message.destination.to');
      Validator.string(destination.to, 'message.destination.to');
      Validator.maxLength(destination.to, 50, 'message.destination.to');
    });

    if (message.deliveryTimeWindow) {
      Validator.required(message.deliveryTimeWindow, 'message.deliveryTimeWindow');
      Validator.object(message.deliveryTimeWindow, 'message.deliveryTimeWindow');
      Validator.required(message.deliveryTimeWindow.days, 'message.deliveryTimeWindow.days');
      Validator.array(message.deliveryTimeWindow.days, 'message.deliveryTimeWindow.days');
      message.deliveryTimeWindow.days.forEach(function (day) {
        Validator.string(day);
      });

      if (message.deliveryTimeWindow.from) {
        Validator.required(message.deliveryTimeWindow.from.hour, 'message.deliveryTimeWindow.from.hour');
        Validator.integer(message.deliveryTimeWindow.from.hour, 'message.deliveryTimeWindow.from.hour');
        Validator.max(message.deliveryTimeWindow.from.hour, 23, 'message.deliveryTimeWindow.from.hour');
        Validator.required(message.deliveryTimeWindow.from.minute, 'message.deliveryTimeWindow.from.minute');
        Validator.integer(message.deliveryTimeWindow.from.minute, 'message.deliveryTimeWindow.from.minute');
        Validator.max(message.deliveryTimeWindow.from.minute, 59, 'message.deliveryTimeWindow.from.minute');
      }

      if (message.deliveryTimeWindow.to) {
        Validator.required(message.deliveryTimeWindow.to.hour, 'message.deliveryTimeWindow.to.hour');
        Validator.integer(message.deliveryTimeWindow.to.hour, 'message.deliveryTimeWindow.to.hour');
        Validator.max(message.deliveryTimeWindow.to.hour, 23, 'message.deliveryTimeWindow.to.hour');
        Validator.required(message.deliveryTimeWindow.to.minute, 'message.deliveryTimeWindow.to.minute');
        Validator.integer(message.deliveryTimeWindow.to.minute, 'message.deliveryTimeWindow.to.minute');
        Validator.max(message.deliveryTimeWindow.to.minute, 59, 'message.deliveryTimeWindow.to.minute');
      }
    }

    if (message.regional && message.regional.indiaDlt) {
      Validator.required(message.regional.indiaDlt.principalEntityId, 'message.regional.indiaDlt.principalEntityId');
      Validator.string(message.regional.indiaDlt.principalEntityId, 'message.regional.indiaDlt.principalEntityId');
    }
  });

  if (message.sendingSpeedLimit) {
    Validator.required(message.sendingSpeedLimit.amount, 'message.sendingSpeedLimit.amount');
    Validator.integer(message.sendingSpeedLimit.amount, 'message.sendingSpeedLimit.amount');
  }

  return true;
}

function validateSMSSendQuery(message) {
  Validator.required(message.username, 'username');
  Validator.string(message.username, 'username');
  Validator.required(message.password, 'password');
  Validator.string(message.password, 'password');
  Validator.required(message.to, 'to');
  Validator.array(message.to, 'to');
  message.to.forEach(function (to) {
    Validator.string(to, 'to');
  });
  return true;
}

var sendEndpoints$1 = {
  text: '/sms/2/text/advanced',
  binary: '/sms/2/binary/advanced',
  query: '/sms/1/text/query'
};
var endpoints$1 = {
  preview: '/sms/1/preview',
  get: '/sms/1/inbox/reports',
  reports: '/sms/1/reports',
  logs: '/sms/1/logs',
  schedule: '/sms/1/bulks',
  status: '/sms/1/bulks/status'
};

var SMS = /*#__PURE__*/function () {
  function SMS(credentials) {
    this.http = new Http(credentials.baseUrl, credentials.authorization);
    this.username = credentials.username;
    this.password = credentials.password;
    this.reports = {
      get: this.getDeliveryReports.bind(this)
    };
    this.logs = {
      get: this.getMessageLogs.bind(this)
    };
    this.scheduled = {
      get: this.getScheduledMessage.bind(this),
      reschedule: this.rescheduleMessage.bind(this)
    };
    this.status = {
      get: this.getMessageStatus.bind(this),
      update: this.updateMessageStatus.bind(this)
    };
  }

  var _proto = SMS.prototype;

  _proto.send = /*#__PURE__*/function () {
    var _send = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message) {
      var response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              if (!message.type) message.type = 'text';

              if (sendEndpoints$1[message.type]) {
                _context.next = 4;
                break;
              }

              throw new Error("Invalid message type " + message.type + ". Supported types are: " + Object.keys(sendEndpoints$1).join(', ') + ".");

            case 4:
              if (!(message.type === 'query')) {
                _context.next = 13;
                break;
              }

              if (this.username && this.password) {
                message.username = this.username;
                message.password = this.password;
              }

              validateSMSMessage(message);
              message.to = message.to.join(',');
              _context.next = 10;
              return this.http.get(sendEndpoints$1[message.type], message);

            case 10:
              response = _context.sent;
              _context.next = 17;
              break;

            case 13:
              validateSMSMessage(message);
              _context.next = 16;
              return this.http.post(sendEndpoints$1[message.type], message);

            case 16:
              response = _context.sent;

            case 17:
              return _context.abrupt("return", response);

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", _context.t0);

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 20]]);
    }));

    function send(_x) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  _proto.preview = /*#__PURE__*/function () {
    var _preview = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              Validator.requiredString(message.text, 'message.text');
              _context2.next = 4;
              return this.http.post(endpoints$1.preview, message);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", _context2.t0);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function preview(_x2) {
      return _preview.apply(this, arguments);
    }

    return preview;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(limit) {
      var response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return this.http.get(endpoints$1.get, {
                limit: limit
              });

            case 3:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", _context3.t0);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 7]]);
    }));

    function get(_x3) {
      return _get.apply(this, arguments);
    }

    return get;
  }()
  /**
   * See the status and the scheduled time of your SMS messages.
   *
   * @param { string } bulkId - ID of the scheduled message
   * @return { AxiosResponse<any, any> } response - Return Axios Response
   */
  ;

  _proto.getScheduledMessage =
  /*#__PURE__*/
  function () {
    var _getScheduledMessage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(bulkId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              Validator.requiredString(bulkId, 'bulkId');
              _context4.next = 4;
              return this.http.get(endpoints$1.schedule, {
                bulkId: bulkId
              });

            case 4:
              response = _context4.sent;
              return _context4.abrupt("return", response);

            case 8:
              _context4.prev = 8;
              _context4.t0 = _context4["catch"](0);
              return _context4.abrupt("return", _context4.t0);

            case 11:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 8]]);
    }));

    function getScheduledMessage(_x4) {
      return _getScheduledMessage.apply(this, arguments);
    }

    return getScheduledMessage;
  }()
  /**
   * Change the date and time for sending scheduled messages.
   *
   * @param { string } bulkId - ID of the scheduled message
   * @param { string } sendAt - Date and time when the message is to be sent.
   * @return { AxiosResponse<any, any> } response - Return Axios Response
   */
  ;

  _proto.rescheduleMessage =
  /*#__PURE__*/
  function () {
    var _rescheduleMessage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bulkId, sendAt) {
      var queryString, response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              Validator.requiredString(bulkId, 'bulkId');
              Validator.requiredString(sendAt, 'sendAt');
              queryString = new URLSearchParams({
                bulkId: bulkId
              });
              _context5.next = 6;
              return this.http.put(endpoints$1.schedule + ("/?" + queryString), {
                sendAt: sendAt
              });

            case 6:
              response = _context5.sent;
              return _context5.abrupt("return", response);

            case 10:
              _context5.prev = 10;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", _context5.t0);

            case 13:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 10]]);
    }));

    function rescheduleMessage(_x5, _x6) {
      return _rescheduleMessage.apply(this, arguments);
    }

    return rescheduleMessage;
  }()
  /**
   * See the status of scheduled messages.
   *
   * @param { string } bulkId - ID of the scheduled message
   * @return { AxiosResponse<any, any> } response - Return Axios Response
   */
  ;

  _proto.getMessageStatus =
  /*#__PURE__*/
  function () {
    var _getMessageStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(bulkId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              Validator.requiredString(bulkId, 'bulkId');
              _context6.next = 4;
              return this.http.get(endpoints$1.status, {
                bulkId: bulkId
              });

            case 4:
              response = _context6.sent;
              return _context6.abrupt("return", response);

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](0);
              return _context6.abrupt("return", _context6.t0);

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 8]]);
    }));

    function getMessageStatus(_x7) {
      return _getMessageStatus.apply(this, arguments);
    }

    return getMessageStatus;
  }()
  /**
   * Change status or completely cancel sending of scheduled messages.
   *
   * @param { string } bulkId - ID of the scheduled message
   * @param { string } status - The status of the message(s).
   * @return { AxiosResponse<any, any> } response - Return Axios Response
   */
  ;

  _proto.updateMessageStatus =
  /*#__PURE__*/
  function () {
    var _updateMessageStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bulkId, status) {
      var queryString, response;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              Validator.requiredString(bulkId, 'bulkId');
              Validator.requiredString(status, 'status');
              queryString = new URLSearchParams({
                bulkId: bulkId
              });
              _context7.next = 6;
              return this.http.put(endpoints$1.status + ("/?" + queryString), {
                status: status
              });

            case 6:
              response = _context7.sent;
              return _context7.abrupt("return", response);

            case 10:
              _context7.prev = 10;
              _context7.t0 = _context7["catch"](0);
              return _context7.abrupt("return", _context7.t0);

            case 13:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 10]]);
    }));

    function updateMessageStatus(_x8, _x9) {
      return _updateMessageStatus.apply(this, arguments);
    }

    return updateMessageStatus;
  }();

  _proto.getDeliveryReports = /*#__PURE__*/function () {
    var _getDeliveryReports = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(filter) {
      var response;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              _context8.next = 3;
              return this.http.get(endpoints$1.reports, filter);

            case 3:
              response = _context8.sent;
              return _context8.abrupt("return", response);

            case 7:
              _context8.prev = 7;
              _context8.t0 = _context8["catch"](0);
              return _context8.abrupt("return", _context8.t0);

            case 10:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[0, 7]]);
    }));

    function getDeliveryReports(_x10) {
      return _getDeliveryReports.apply(this, arguments);
    }

    return getDeliveryReports;
  }();

  _proto.getMessageLogs = /*#__PURE__*/function () {
    var _getMessageLogs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(filter) {
      var response;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              _context9.next = 3;
              return this.http.get(endpoints$1.logs, filter);

            case 3:
              response = _context9.sent;
              return _context9.abrupt("return", response);

            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](0);
              return _context9.abrupt("return", _context9.t0);

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 7]]);
    }));

    function getMessageLogs(_x11) {
      return _getMessageLogs.apply(this, arguments);
    }

    return getMessageLogs;
  }();

  return SMS;
}();

var endpoints$2 = {
  session: '/auth/1/session',
  oauth2: '/auth/1/oauth2/token'
};

var Auth = /*#__PURE__*/function () {
  function Auth(credentials) {
    this.credentials = credentials;
    this.ibsso = {
      create: this.createSession.bind(this),
      destroy: this.destroySession.bind(this)
    };
    this.oauth2 = {
      create: this.createToken.bind(this)
    };
  }

  var _proto = Auth.prototype;

  _proto.createSession = /*#__PURE__*/function () {
    var _createSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var http, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              Validator.required(this.credentials.password, 'Infobip.password');
              Validator.required(this.credentials.username, 'Infobip.username');
              http = new Http(this.credentials.baseUrl);
              _context.next = 6;
              return http.post(endpoints$2.session, {
                password: this.credentials.password,
                username: this.credentials.username
              });

            case 6:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", _context.t0);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 10]]);
    }));

    function createSession() {
      return _createSession.apply(this, arguments);
    }

    return createSession;
  }();

  _proto.destroySession = /*#__PURE__*/function () {
    var _destroySession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ibssoToken) {
      var http, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              http = new Http(this.credentials.baseUrl, exports.AuthType.IBSSO + " " + ibssoToken);
              _context2.next = 4;
              return http["delete"](endpoints$2.session);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", _context2.t0);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function destroySession(_x) {
      return _destroySession.apply(this, arguments);
    }

    return destroySession;
  }();

  _proto.createToken = /*#__PURE__*/function () {
    var _createToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var http, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              Validator.required(this.credentials.password, 'Infobip.password');
              Validator.required(this.credentials.username, 'Infobip.username');
              http = new Http(this.credentials.baseUrl);
              _context3.next = 6;
              return http.post(endpoints$2.oauth2 + "?" + new url.URLSearchParams({
                client_secret: this.credentials.password,
                client_id: this.credentials.username,
                grant_type: 'client_credentials'
              }).toString(), {}, {
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded'
                }
              });

            case 6:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", _context3.t0);

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 10]]);
    }));

    function createToken() {
      return _createToken.apply(this, arguments);
    }

    return createToken;
  }();

  return Auth;
}();

function FormDataBuilder(formData, data, parentKey) {
  if (typeof data === 'object') {
    Object.keys(data).forEach(function (key) {
      FormDataBuilder(formData, data[key], parentKey ? parentKey + "['" + key + "']" : key);
    });
  } else {
    formData.append(parentKey, data);
  }
}

var endpoints$3 = {
  domain: '/email/1/domains',
  verify: '/email/1/domains/{domainName}/verify',
  tracking: '/email/1/domains/{domainName}/tracking'
};

var EmailDomain = /*#__PURE__*/function () {
  function EmailDomain(credentials) {
    this.http = new Http(credentials.baseUrl, credentials.authorization);
  }

  var _proto = EmailDomain.prototype;

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(filter) {
      var response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!(typeof filter === 'string')) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return this.http.get(endpoints$3.domain + "/" + filter);

            case 4:
              response = _context.sent;
              _context.next = 10;
              break;

            case 7:
              _context.next = 9;
              return this.http.get(endpoints$3.domain, filter);

            case 9:
              response = _context.sent;

            case 10:
              return _context.abrupt("return", response);

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", _context.t0);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 13]]);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.add = /*#__PURE__*/function () {
    var _add = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(domainName) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              Validator.required(domainName, 'domainName');
              Validator.string(domainName, 'domainName');
              _context2.next = 5;
              return this.http.post(endpoints$3.domain, {
                domainName: domainName
              });

            case 5:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", _context2.t0);

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 9]]);
    }));

    function add(_x2) {
      return _add.apply(this, arguments);
    }

    return add;
  }();

  _proto.verify = /*#__PURE__*/function () {
    var _verify = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(domainName) {
      var response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              Validator.required(domainName, 'domainName');
              Validator.string(domainName, 'domainName');
              _context3.next = 5;
              return this.http.post(endpoints$3.verify.replace('{domainName}', domainName), {});

            case 5:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", _context3.t0);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 9]]);
    }));

    function verify(_x3) {
      return _verify.apply(this, arguments);
    }

    return verify;
  }();

  _proto.tracking = /*#__PURE__*/function () {
    var _tracking = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(domainName, request) {
      var response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              Validator.required(domainName, 'domainName');
              Validator.string(domainName, 'domainName');
              _context4.next = 5;
              return this.http.put(endpoints$3.tracking.replace('{domainName}', domainName), request);

            case 5:
              response = _context4.sent;
              return _context4.abrupt("return", response);

            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](0);
              return _context4.abrupt("return", _context4.t0);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 9]]);
    }));

    function tracking(_x4, _x5) {
      return _tracking.apply(this, arguments);
    }

    return tracking;
  }();

  _proto["delete"] = /*#__PURE__*/function () {
    var _delete2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(domainName) {
      var response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              Validator.required(domainName, 'domainName');
              Validator.string(domainName, 'domainName');
              _context5.next = 5;
              return this.http["delete"](endpoints$3.domain + "/" + domainName);

            case 5:
              response = _context5.sent;
              return _context5.abrupt("return", response);

            case 9:
              _context5.prev = 9;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", _context5.t0);

            case 12:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 9]]);
    }));

    function _delete(_x6) {
      return _delete2.apply(this, arguments);
    }

    return _delete;
  }();

  return EmailDomain;
}();

var endpoints$4 = {
  send: '/email/3/send',
  validate: '/email/2/validation',
  bulk: '/email/1/bulks',
  report: '/email/1/reports',
  status: '/email/1/bulks/status',
  log: '/email/1/logs'
};

var Email = /*#__PURE__*/function () {
  function Email(credentials) {
    this.http = new Http(credentials.baseUrl, credentials.authorization);
    this.domain = new EmailDomain(credentials);
    this.log = {
      get: this.getLog.bind(this)
    };
    this.report = {
      get: this.getReport.bind(this)
    };
    this.status = {
      get: this.getStatus.bind(this),
      update: this.updateStatus.bind(this)
    };
  }

  var _proto = Email.prototype;

  _proto.send = /*#__PURE__*/function () {
    var _send = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(email) {
      var form, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              Validator.required(email.to, 'email.to');
              Validator.string(email.to, 'email.to');
              Validator.required(email.from, 'email.from');
              Validator.string(email.from, 'email.from');

              if (!email.templateId) {
                Validator.required(email.subject, 'email.subject');
                Validator.string(email.subject, 'email.subject');
              }

              if (email.text || email.html || email.templateId) {
                _context.next = 8;
                break;
              }

              throw new Error('Email must contain at least one of these (text, html or templateId).');

            case 8:
              form = new FormData();
              FormDataBuilder(form, email);
              _context.next = 12;
              return this.http.post(endpoints$4.send, form, {
                headers: form.getHeaders()
              });

            case 12:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", _context.t0);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 16]]);
    }));

    function send(_x) {
      return _send.apply(this, arguments);
    }

    return send;
  }();

  _proto.validate = /*#__PURE__*/function () {
    var _validate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              Validator.required(to, 'to');
              Validator.string(to, 'to');
              _context2.next = 5;
              return this.http.post(endpoints$4.validate, {
                to: to
              });

            case 5:
              response = _context2.sent;
              return _context2.abrupt("return", response);

            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", _context2.t0);

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 9]]);
    }));

    function validate(_x2) {
      return _validate.apply(this, arguments);
    }

    return validate;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bulkId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              Validator.required(bulkId, 'bulkId');
              Validator.string(bulkId, 'bulkId');
              _context3.next = 5;
              return this.http.get(endpoints$4.bulk, {
                bulkId: bulkId
              });

            case 5:
              response = _context3.sent;
              return _context3.abrupt("return", response);

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", _context3.t0);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 9]]);
    }));

    function get(_x3) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.reschedule = /*#__PURE__*/function () {
    var _reschedule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(bulkId, sendAt) {
      var response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              Validator.required(bulkId, 'bulkId');
              Validator.string(bulkId, 'bulkId');
              Validator.required(sendAt, 'sendAt');
              Validator.string(sendAt, 'sendAt');
              _context4.next = 7;
              return this.http.put(endpoints$4.bulk + "?bulkId=" + bulkId, {
                sendAt: sendAt
              });

            case 7:
              response = _context4.sent;
              return _context4.abrupt("return", response);

            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](0);
              return _context4.abrupt("return", _context4.t0);

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 11]]);
    }));

    function reschedule(_x4, _x5) {
      return _reschedule.apply(this, arguments);
    }

    return reschedule;
  }();

  _proto.getReport = /*#__PURE__*/function () {
    var _getReport = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(filter) {
      var response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              _context5.next = 3;
              return this.http.get(endpoints$4.report, filter);

            case 3:
              response = _context5.sent;
              return _context5.abrupt("return", response);

            case 7:
              _context5.prev = 7;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", _context5.t0);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 7]]);
    }));

    function getReport(_x6) {
      return _getReport.apply(this, arguments);
    }

    return getReport;
  }();

  _proto.getLog = /*#__PURE__*/function () {
    var _getLog = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(filter) {
      var response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              _context6.next = 3;
              return this.http.get(endpoints$4.log, filter);

            case 3:
              response = _context6.sent;
              return _context6.abrupt("return", response);

            case 7:
              _context6.prev = 7;
              _context6.t0 = _context6["catch"](0);
              return _context6.abrupt("return", _context6.t0);

            case 10:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 7]]);
    }));

    function getLog(_x7) {
      return _getLog.apply(this, arguments);
    }

    return getLog;
  }();

  _proto.getStatus = /*#__PURE__*/function () {
    var _getStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bulkId) {
      var response;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              Validator.required(bulkId, 'bulkId');
              Validator.string(bulkId, 'bulkId');
              _context7.next = 5;
              return this.http.get(endpoints$4.status, {
                bulkId: bulkId
              });

            case 5:
              response = _context7.sent;
              return _context7.abrupt("return", response);

            case 9:
              _context7.prev = 9;
              _context7.t0 = _context7["catch"](0);
              return _context7.abrupt("return", _context7.t0);

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 9]]);
    }));

    function getStatus(_x8) {
      return _getStatus.apply(this, arguments);
    }

    return getStatus;
  }();

  _proto.updateStatus = /*#__PURE__*/function () {
    var _updateStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(bulkId, status) {
      var response;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              Validator.required(bulkId, 'bulkId');
              Validator.string(bulkId, 'bulkId');
              Validator.required(status, 'status');
              Validator.oneOf(status, exports.EmailStatus, 'status');
              _context8.next = 7;
              return this.http.put(endpoints$4.status + "?bulkId=" + bulkId, {
                status: status
              });

            case 7:
              response = _context8.sent;
              return _context8.abrupt("return", response);

            case 11:
              _context8.prev = 11;
              _context8.t0 = _context8["catch"](0);
              return _context8.abrupt("return", _context8.t0);

            case 14:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[0, 11]]);
    }));

    function updateStatus(_x9, _x10) {
      return _updateStatus.apply(this, arguments);
    }

    return updateStatus;
  }();

  return Email;
}();

var Infobip = function Infobip(_ref) {
  var baseUrl = _ref.baseUrl,
      authType = _ref.authType,
      apiKey = _ref.apiKey,
      username = _ref.username,
      password = _ref.password,
      oauthToken = _ref.oauthToken,
      ibssoToken = _ref.ibssoToken;
  Validator.required(baseUrl, 'Infobip.baseUrl');
  Validator.required(authType, 'Infobip.authType');
  password && Validator.string(password, 'Infobip.password');
  username && Validator.string(username, 'Infobip.username');
  apiKey && Validator.string(apiKey, 'Infobip.apiKey');
  oauthToken && Validator.string(oauthToken, 'Infobip.oauthToken');
  ibssoToken && Validator.string(ibssoToken, 'Infobip.ibssoToken');
  this.credentials = new InfobipAuth({
    baseUrl: baseUrl,
    authType: authType,
    apiKey: apiKey,
    username: username,
    password: password,
    oauthToken: oauthToken,
    ibssoToken: ibssoToken
  });
  this.channels = {
    whatsapp: new WhatsApp(this.credentials),
    email: new Email(this.credentials),
    sms: new SMS(this.credentials)
  };
  this.auth = new Auth(this.credentials);
};

exports.Infobip = Infobip;
//# sourceMappingURL=sdk.cjs.development.js.map
